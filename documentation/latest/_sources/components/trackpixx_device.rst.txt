..
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   WARNING:  This is a generated file.  Do not edit it manually!
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

.. index::
   single: TRACKPixx Device
   single: Input/Output; TRACKPixx Device

.. _TRACKPixx Device:

TRACKPixx Device
================

*Available on macOS*


Description
-----------
Interface to a `TRACKPixx3 <https://vpixx.com/products/trackpixx/>`_
device.

This component also exposes the functions of the `DATAPixx3
<https://vpixx.com/products/datapixx3/>`_ device to which the TRACKPixx is
connected.  To use both the TRACKPixx and DATAPixx in an experiment, create
a single TRACKPixx Device.  To use the DATAPixx without the TRACKPixx,
create a `DATAPixx Device` instead.



Signature
---------
``iodevice/trackpixx``


Required Parameters
-------------------

distance
^^^^^^^^
:Example: ``100``

Distance from subject's eyes to camera lens (in centimeters)


lens_type
^^^^^^^^^
:Options: | ``25mm``
          | ``50mm``
          | ``75mm``

Camera lens type

iris_expected_size
^^^^^^^^^^^^^^^^^^
:Example: ``100``

Expected size of the subject's iris in the camera image (in pixels)


update_interval
^^^^^^^^^^^^^^^
:Example: ``3ms``

MWorks will poll the device for new input data every ``update_interval`` microseconds




Optional Parameters
-------------------

show_overlay
^^^^^^^^^^^^
:Default: ``NO``

If ``YES``, the console monitor (i.e. the display connected to DATAPixx3 DisplayPort OUT2) will show the camera image and pupil center tracking positions in an overlay window


tracker_window_brightness
^^^^^^^^^^^^^^^^^^^^^^^^^
:Default: ``200``

Brightness of the overlay window enabled by `show_overlay`_. Must be an integer between 0 and 255 (inclusive).


ir_illuminator_intensity
^^^^^^^^^^^^^^^^^^^^^^^^
:Default: ``8``

Intensity of the infrared illuminator. Must be an integer between 0 and 8 (inclusive).


fixation_speed
^^^^^^^^^^^^^^
:Default: ``20``

Eye velocity threshold below which to classify fixations (in eye position units per second)


fixation_samples
^^^^^^^^^^^^^^^^
:Default: ``25``

Minimum number of consecutive samples required to classify a fixation event


saccade_speed
^^^^^^^^^^^^^
:Default: ``60``

Eye velocity threshold above which to classify saccades (in eye position units per second)


saccade_samples
^^^^^^^^^^^^^^^
:Default: ``10``

Minimum number of consecutive samples required to classify a saccade event


species
^^^^^^^
:Options: | ``human``
          | ``nhp``
:Default: ``human``

Subject species

tracking_mode
^^^^^^^^^^^^^
:Options: | ``standard``
          | ``headfixed_nhp``
:Default: ``standard``

Tracking mode

tracker_time_seconds
^^^^^^^^^^^^^^^^^^^^

Variable in which to store time of sample (in seconds) on TRACKPixx clock


screen_lx
^^^^^^^^^

Variable in which to store Cartesian screen coordinate for x component of left eye


screen_ly
^^^^^^^^^

Variable in which to store Cartesian screen coordinate for y component of left eye


pupil_size_l
^^^^^^^^^^^^

Variable in which to store diameter of left eye pupil

screen_rx
^^^^^^^^^

Variable in which to store Cartesian screen coordinate for x component of right eye


screen_ry
^^^^^^^^^

Variable in which to store Cartesian screen coordinate for y component of right eye


pupil_size_r
^^^^^^^^^^^^

Variable in which to store diameter of right eye pupil

blink_l
^^^^^^^

Variable in which to store left eye blink state (true when blinking, false otherwise)


blink_r
^^^^^^^

Variable in which to store right eye blink state (true when blinking, false otherwise)


fixation_l
^^^^^^^^^^

Variable in which to store left eye fixation state (true when fixating, false otherwise)


fixation_r
^^^^^^^^^^

Variable in which to store right eye fixation state (true when fixating, false otherwise)


saccade_l
^^^^^^^^^

Variable in which to store left eye saccade state (true when in saccade, false otherwise)


saccade_r
^^^^^^^^^

Variable in which to store right eye saccade state (true when in saccade, false otherwise)


raw_lx
^^^^^^

Variable in which to store pupil-to-corneal reflection vector x component for left eye


raw_ly
^^^^^^

Variable in which to store pupil-to-corneal reflection vector y component for left eye


raw_rx
^^^^^^

Variable in which to store pupil-to-corneal reflection vector x component for right eye


raw_ry
^^^^^^

Variable in which to store pupil-to-corneal reflection vector y component for right eye


clock_offset_nanos
^^^^^^^^^^^^^^^^^^

Variable in which to store the computed offset (in nanoseconds) between
the device clock and MWorks' clock.

The clock offset is recomputed once per second and is used to convert
DATAPixx event and sample times to MWorks times.  Use this parameter if
you want a record of the computed clock offsets in your event file.


enable_dout_pixel_mode
^^^^^^^^^^^^^^^^^^^^^^
:Default: ``NO``

If ``YES``, the digital output port will be used to output the RGB value
of the first upper left pixel of the screen.

In this mode, the digital output port cannot be used for `bit output
<DATAPixx Bit Output Channel>` or `word output <DATAPixx Word Output
Channel>` channels.  However, these channels may still be configured on
the digital input port.


enable_dout_vsync_mode
^^^^^^^^^^^^^^^^^^^^^^
:Default: ``NO``

If ``YES``, the VSYNC signal will be output on bit 23 of the digital
output port.

This mode cannot be enabled if `enable_dout_pixel_mode`_ is set to
``YES``.


enable_din_stabilize
^^^^^^^^^^^^^^^^^^^^
:Default: ``NO``

If ``YES``, digital input transitions are recognized only after the entire digital input bus has been stable for 80 nanoseconds


enable_din_debounce
^^^^^^^^^^^^^^^^^^^
:Default: ``NO``

If ``YES``, after a digital input transitions, further transitions will be ignored for the next 30 milliseconds


enable_dout_din_loopback
^^^^^^^^^^^^^^^^^^^^^^^^
:Default: ``NO``

If ``YES``, digital output bits are looped back to the corresponding digital input bits.  This is useful primarily for testing the device.


din_event_buffer_size
^^^^^^^^^^^^^^^^^^^^^
:Default: ``100``

Transitions on digital input bits 0-15 are logged to an on-device buffer and read by MWorks at the rate specified by `update_interval`_. This parameter sets the maximum size (in number of events) of the buffer.  If the buffer is too small, writes will "wrap", and new events will overwrite old ones.


analog_input_data_interval
^^^^^^^^^^^^^^^^^^^^^^^^^^
:Example: ``1ms``

Interval between acquired samples on analog input channels (microseconds)


enable_dac_adc_loopback
^^^^^^^^^^^^^^^^^^^^^^^
:Default: ``NO``

If ``YES``, analog outputs are looped back to analog inputs as follows::

    DAC_DATA0 → ADC_DATA0/2/4/6/8/10/12/14
    DAC_DATA1 → ADC_DATA1/3/5/7/9/11/13/15
    DAC_DATA2 → ADC_REF0
    DAC_DATA3 → ADC_REF1

This is useful primarily for testing the device.


autostart
^^^^^^^^^
:Default: ``NO``

If ``YES``, the device will start I/O automatically (as if by an
implicit `Start IO Device` action) when the experiment starts running.

*Note*: Device I/O will always stop automatically when the experiment
stops running, irrespective of this setting.


alt
^^^

Alternative device to use if this one fails to initialize (e.g. because the required hardware is not available).  If ``#allowAltFailover`` is set to 0 or false, this parameter is ignored.




Placement
---------
.. list-table::
   :widths: auto
   :stub-columns: 1

   * - Allowed at top level:
     - Yes
   * - Allowed parent:
     - `Folder`
   * - Allowed children:
     - `DATAPixx Analog Input Channel`, `DATAPixx Analog Output Channel`, `DATAPixx Bit Input Channel`, `DATAPixx Bit Output Channel`, `DATAPixx Word Input Channel`, `DATAPixx Word Output Channel`
